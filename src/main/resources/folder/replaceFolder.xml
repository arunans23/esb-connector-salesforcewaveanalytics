<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="replaceFolder" xmlns="http://ws.apache.org/ns/synapse">
    <!--Required parameters -->
    <parameter name="folderId" description="The Id of the folder."/>
    <!-- Optional parameters -->
    <parameter name="applicationStatus" description="The creation status of application  "/>
    <parameter name="assetIcon"
               description="The icon enumeration that best represents the new folder or application. Valid values are 1.png through 20.png."/>
    <parameter name="attachedFilesId" description="The attached files id."/>
    <parameter name="attachedFilesName" description="The attached files name."/>
    <parameter name="can​Be​Shared​Externally" description="Whether the application is shared in Communities"/>
    <parameter name="defaultAssetId" description="ID of the default Asset"/>
    <parameter name="defaultAssetName" description="Name of the default asset."/>
    <parameter name="description" description="The description of the new folder or application."/>
    <parameter name="label" description="The user-facing name of the new folder or application"/>
    <parameter name="name" description="The internal API name of the new folder or application."/>
    <sequence>
        <property name="uri.var.folderId" expression="$func:folderId"/>
        <property name="applicationStatus" expression="$func:applicationStatus"/>
        <property name="assetIcon" expression="$func:assetIcon"/>
        <property name="attachedFilesId" expression="$func:attachedFilesId"/>
        <property name="attachedFilesName" expression="$func:attachedFilesName"/>
        <property name="canBeSharedExternally" expression="$func:canBeSharedExternally"/>
        <property name="defaultAssetId" expression="$func:defaultAssetId"/>
        <property name="defaultAssetName" expression="$func:defaultAssetName"/>
        <property name="description" expression="$func:description"/>
        <property name="label" expression="$func:label"/>
        <property name="name" expression="$func:name"/>
        <script language="js">
            <![CDATA[
            var applicationStatus = mc.getProperty('applicationStatus');
            var assetIcon = mc.getProperty('assetIcon');
            var attachedFilesId = mc.getProperty('attachedFilesId');
            var attachedFilesName = mc.getProperty('attachedFilesName');
            var canBeSharedExternally = mc.getProperty('canBeSharedExternally');
            var defaultAssetId = mc.getProperty('defaultAssetId');
            var defaultAssetName = mc.getProperty('defaultAssetName');
            var description = mc.getProperty('description');
            var isPinned = mc.getProperty('isPinned');
            var label = mc.getProperty('label');
            var name = mc.getProperty('name');
            var payload = {};
            var nestedDefaultAsset = {};
            var attachedFiles = [];
            var nestedAttached = {};
            attachedFiles[0] = nestedAttached;
            if (applicationStatus != null && applicationStatus != "") {
               payload.applicationStatus = applicationStatus;
            }
            if (assetIcon != null && assetIcon != "") {
               payload.assetIcon = assetIcon;
            }
            if (canBeSharedExternally != null && canBeSharedExternally != "") {
               payload.canBeSharedExternally = canBeSharedExternally;
            }
            if (defaultAssetId != null && defaultAssetId != "") {
               nestedDefaultAsset.id = String(defaultAssetId);
               payload.defaultAsset = nestedDefaultAsset;
            }
            if (defaultAssetName != null && defaultAssetName != "") {
               nestedDefaultAsset.name = String(defaultAssetName);
               payload.defaultAsset = nestedDefaultAsset;
            }
            if (attachedFilesId != null && attachedFilesId != "") {
               nestedAttached.id = attachedFilesId;
               payload.attachedFiles= attachedFiles;
            }
            if (attachedFilesName != null && attachedFilesName != "") {
                nestedAttached.name = attachedFilesName;
                payload.attachedFiles= attachedFiles;
            }
            if (description != null && description != "") {
               payload.description = description;
            }
            if (label != null && label != "") {
               payload.label = label;
            }
            if (name != null && name != "") {
               payload.name = name;
            }
            mc.setPayloadJSON(payload);
         ]]>
        </script>
        <filter source="$ctx:salesforceBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="put"
                              uri-template="{uri.var.apiUrl}/services/data/{uri.var.apiVersion}/wave/folders/{uri.var.folderId}">
                            <timeout>
                                <duration>{$ctx:timeout}</duration>
                                <responseAction>fault</responseAction>
                            </timeout>
                            <suspendOnFailure>
                                <errorCodes>-1</errorCodes>
                                <progressionFactor>1.0</progressionFactor>
                            </suspendOnFailure>
                            <markForSuspension>
                                <errorCodes>-1</errorCodes>
                            </markForSuspension>
                        </http>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="put"
                              uri-template="{uri.var.apiUrl}/services/data/{uri.var.apiVersion}/wave/folders/{uri.var.folderId}">
                            <timeout>
                                <duration>{$ctx:timeout}</duration>
                                <responseAction>fault</responseAction>
                            </timeout>
                            <suspendOnFailure>
                                <errorCodes>-1</errorCodes>
                                <progressionFactor>1.0</progressionFactor>
                            </suspendOnFailure>
                            <markForSuspension>
                                <errorCodes>-1</errorCodes>
                            </markForSuspension>
                        </http>
                    </endpoint>
                </call>
            </else>
        </filter>
    </sequence>
</template>
